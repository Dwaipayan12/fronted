{"ast":null,"code":"var _jsxFileName = \"C:\\\\Apna\\\\DeltaLibrary\\\\Zoom\\\\fronted\\\\src\\\\contexts\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { createContext, useContext, useState } from \"react\";\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\nconst client = axios.create({\n  baseURL: \"http://localhost:8000/api/v1/users\"\n});\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [userData, setUserData] = useState(null);\n  const handleRegister = async (name, username, password) => {\n    try {\n      let request = await client.post(\"/register\", {\n        name: name,\n        username: username,\n        password: password\n      });\n      if (request.status === 201) {\n        // use the numeric status code directly\n        return request.data.message;\n      }\n    } catch (err) {\n      throw err;\n    }\n  };\n  const data = {\n    userData,\n    setUserData,\n    handleRegister\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: data,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"hXjgW5Dna7AfY8GclqpRKYNaYWw=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["axios","createContext","useContext","useState","useNavigate","jsxDEV","_jsxDEV","AuthContext","client","create","baseURL","AuthProvider","children","_s","userData","setUserData","handleRegister","name","username","password","request","post","status","data","message","err","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Apna/DeltaLibrary/Zoom/fronted/src/contexts/AuthContext.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { createContext, useContext, useState } from \"react\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport const AuthContext = createContext({});\r\n\r\nconst client = axios.create({\r\n    baseURL: \"http://localhost:8000/api/v1/users\"\r\n});\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [userData, setUserData] = useState(null);\r\n\r\n    const handleRegister = async (name, username, password) => {\r\n        try {\r\n            let request = await client.post(\"/register\", {\r\n                name: name,\r\n                username: username,\r\n                password: password\r\n            });\r\n            if (request.status === 201) { // use the numeric status code directly\r\n                return request.data.message;\r\n            }\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    };\r\n\r\n    const data = {\r\n        userData, setUserData, handleRegister\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={data}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC3D,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC,CAAC,CAAC;AAE5C,MAAMO,MAAM,GAAGR,KAAK,CAACS,MAAM,CAAC;EACxBC,OAAO,EAAE;AACb,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMa,cAAc,GAAG,MAAAA,CAAOC,IAAI,EAAEC,QAAQ,EAAEC,QAAQ,KAAK;IACvD,IAAI;MACA,IAAIC,OAAO,GAAG,MAAMZ,MAAM,CAACa,IAAI,CAAC,WAAW,EAAE;QACzCJ,IAAI,EAAEA,IAAI;QACVC,QAAQ,EAAEA,QAAQ;QAClBC,QAAQ,EAAEA;MACd,CAAC,CAAC;MACF,IAAIC,OAAO,CAACE,MAAM,KAAK,GAAG,EAAE;QAAE;QAC1B,OAAOF,OAAO,CAACG,IAAI,CAACC,OAAO;MAC/B;IACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;MACV,MAAMA,GAAG;IACb;EACJ,CAAC;EAED,MAAMF,IAAI,GAAG;IACTT,QAAQ;IAAEC,WAAW;IAAEC;EAC3B,CAAC;EAED,oBACIV,OAAA,CAACC,WAAW,CAACmB,QAAQ;IAACC,KAAK,EAAEJ,IAAK;IAAAX,QAAA,EAC7BA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAAClB,EAAA,CA3BWF,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}