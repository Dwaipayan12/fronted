{"ast":null,"code":"var _jsxFileName = \"C:\\\\Apna\\\\DeltaLibrary\\\\Zoom\\\\fronted\\\\src\\\\contexts\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\n// import axios from \"axios\";\n// import { httpStatus,Children,handleRegister, createContext,useContext, useState } from \"react\";\n// import { useNavigate } from 'react-router-dom';\n\n// export const AuthContext=createContext({});\n// const client=axios.create({\n//     baseURL:\"http://localhost:8000/api/v1/users\"\n// })\n\n// export const AuthProvider=({Children})=>{\n//     const authContext=useContext(AuthContext);\n//     const [userData,setUserData]=useState(authContext);\n//     const handleRegister=async(name,username,password)=>{\n//      try{\n//         let request=await client.post(\"/register\",{\n//             name:name,\n//             username:username,\n//             password:password\n//         })\n//         if(request.status === httpStatus.CREATED){\n//             return request.data.message;\n//         }\n//      }\n//      catch(err){\n//        throw err;\n//      }\n//     }\n//     const router=useNavigate();\n//     const data={\n//         userData,setUserData,handleRegister\n//     }\n//     return(\n//         <AuthContext.Provider value={data}>\n//             {Children}\n//         </AuthContext.Provider>\n//     )\n// }\n\nimport axios from \"axios\";\nimport { httpStatus, createContext, useContext, useState } from \"react\";\nimport { useNavigate } from 'react-router-dom';\n//import router from \"../../../backend/src/routes/userRoutes\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\nconst client = axios.create({\n  baseURL: \"http://localhost:8000/api/v1/users\"\n});\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [userData, setUserData] = useState(AuthContext);\n  const router = useNavigate();\n  const handleRegister = async (name, username, password) => {\n    try {\n      let request = await client.post(\"/register\", {\n        name: name,\n        username: username,\n        password: password\n      });\n      if (request.status === 201) {\n        // use the numeric status code directly\n        return request.data.message;\n      }\n    } catch (err) {\n      throw err;\n    }\n  };\n  // const handlelogin=async(username,password)=>{\n  //     try{\n  //         let request=await client.post(\"/login\",{\n  //             username:username,\n  //             password:password\n  //         });\n  //         console.log(\"ok done\");\n  //         if(request.status === httpStatus.OK){\n  //            localStorage.setItem(\"token\",request.data.token);\n  //            console.log(request.data);\n  //            console.log(\"user login\");\n  //           // router(\"/home\");\n  //         }\n  //     }\n  //     catch (err) {\n  //         throw err;\n  //     }\n  // }\n  const handlelogin = async (username, password) => {\n    try {\n      let request = await client.post(\"/login\", {\n        username: username,\n        password: password\n      });\n      console.log(\"Request sent successfully\");\n      if (request.status === 200) {\n        // Use 200 directly\n        localStorage.setItem(\"token\", request.data.token);\n        console.log(request.data);\n        console.log(\"User logged in successfully\");\n\n        // Uncomment to navigate\n        router(\"/home\");\n      }\n    } catch (err) {\n      console.error(\"Login failed\", err);\n    }\n  };\n  const data = {\n    userData,\n    setUserData,\n    handleRegister,\n    handlelogin\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: data,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"c7UZOsQOY6L6cbVFou4/6U4D9ME=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["axios","httpStatus","createContext","useContext","useState","useNavigate","jsxDEV","_jsxDEV","AuthContext","client","create","baseURL","AuthProvider","children","_s","userData","setUserData","router","handleRegister","name","username","password","request","post","status","data","message","err","handlelogin","console","log","localStorage","setItem","token","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Apna/DeltaLibrary/Zoom/fronted/src/contexts/AuthContext.jsx"],"sourcesContent":["// import axios from \"axios\";\r\n// import { httpStatus,Children,handleRegister, createContext,useContext, useState } from \"react\";\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\n// export const AuthContext=createContext({});\r\n// const client=axios.create({\r\n//     baseURL:\"http://localhost:8000/api/v1/users\"\r\n// })\r\n\r\n// export const AuthProvider=({Children})=>{\r\n//     const authContext=useContext(AuthContext);\r\n//     const [userData,setUserData]=useState(authContext);\r\n//     const handleRegister=async(name,username,password)=>{\r\n//      try{\r\n//         let request=await client.post(\"/register\",{\r\n//             name:name,\r\n//             username:username,\r\n//             password:password\r\n//         })\r\n//         if(request.status === httpStatus.CREATED){\r\n//             return request.data.message;\r\n//         }\r\n//      }\r\n//      catch(err){\r\n//        throw err;\r\n//      }\r\n//     }\r\n//     const router=useNavigate();\r\n//     const data={\r\n//         userData,setUserData,handleRegister\r\n//     }\r\n//     return(\r\n//         <AuthContext.Provider value={data}>\r\n//             {Children}\r\n//         </AuthContext.Provider>\r\n//     )\r\n// }\r\n\r\nimport axios from \"axios\";\r\nimport { httpStatus,createContext, useContext, useState } from \"react\";\r\nimport { useNavigate } from 'react-router-dom';\r\n//import router from \"../../../backend/src/routes/userRoutes\";\r\n\r\nexport const AuthContext = createContext({});\r\n\r\nconst client = axios.create({\r\n    baseURL: \"http://localhost:8000/api/v1/users\"\r\n});\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [userData, setUserData] = useState(AuthContext);\r\n\r\n    const router=useNavigate();\r\n\r\n    const handleRegister = async (name, username, password) => {\r\n        try {\r\n            let request = await client.post(\"/register\", {\r\n                name: name,\r\n                username: username,\r\n                password: password\r\n            });\r\n            if (request.status === 201) { // use the numeric status code directly\r\n                return request.data.message;\r\n            }\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    };\r\n    // const handlelogin=async(username,password)=>{\r\n    //     try{\r\n    //         let request=await client.post(\"/login\",{\r\n    //             username:username,\r\n    //             password:password\r\n    //         });\r\n    //         console.log(\"ok done\");\r\n    //         if(request.status === httpStatus.OK){\r\n    //            localStorage.setItem(\"token\",request.data.token);\r\n    //            console.log(request.data);\r\n    //            console.log(\"user login\");\r\n    //           // router(\"/home\");\r\n    //         }\r\n    //     }\r\n    //     catch (err) {\r\n    //         throw err;\r\n    //     }\r\n    // }\r\n    const handlelogin = async (username, password) => {\r\n        try {\r\n            let request = await client.post(\"/login\", {\r\n                username: username,\r\n                password: password\r\n            });\r\n    \r\n            console.log(\"Request sent successfully\");\r\n    \r\n            if (request.status === 200) {  // Use 200 directly\r\n                localStorage.setItem(\"token\", request.data.token);\r\n                console.log(request.data);\r\n                console.log(\"User logged in successfully\");\r\n    \r\n                // Uncomment to navigate\r\n                router(\"/home\");\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Login failed\", err);\r\n        }\r\n    };\r\n    \r\n    const data = {\r\n        userData, setUserData, handleRegister,handlelogin\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={data}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,EAACC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AACtE,SAASC,WAAW,QAAQ,kBAAkB;AAC9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC,CAAC,CAAC;AAE5C,MAAMO,MAAM,GAAGT,KAAK,CAACU,MAAM,CAAC;EACxBC,OAAO,EAAE;AACb,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAACI,WAAW,CAAC;EAErD,MAAMS,MAAM,GAACZ,WAAW,CAAC,CAAC;EAE1B,MAAMa,cAAc,GAAG,MAAAA,CAAOC,IAAI,EAAEC,QAAQ,EAAEC,QAAQ,KAAK;IACvD,IAAI;MACA,IAAIC,OAAO,GAAG,MAAMb,MAAM,CAACc,IAAI,CAAC,WAAW,EAAE;QACzCJ,IAAI,EAAEA,IAAI;QACVC,QAAQ,EAAEA,QAAQ;QAClBC,QAAQ,EAAEA;MACd,CAAC,CAAC;MACF,IAAIC,OAAO,CAACE,MAAM,KAAK,GAAG,EAAE;QAAE;QAC1B,OAAOF,OAAO,CAACG,IAAI,CAACC,OAAO;MAC/B;IACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;MACV,MAAMA,GAAG;IACb;EACJ,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,WAAW,GAAG,MAAAA,CAAOR,QAAQ,EAAEC,QAAQ,KAAK;IAC9C,IAAI;MACA,IAAIC,OAAO,GAAG,MAAMb,MAAM,CAACc,IAAI,CAAC,QAAQ,EAAE;QACtCH,QAAQ,EAAEA,QAAQ;QAClBC,QAAQ,EAAEA;MACd,CAAC,CAAC;MAEFQ,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MAExC,IAAIR,OAAO,CAACE,MAAM,KAAK,GAAG,EAAE;QAAG;QAC3BO,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEV,OAAO,CAACG,IAAI,CAACQ,KAAK,CAAC;QACjDJ,OAAO,CAACC,GAAG,CAACR,OAAO,CAACG,IAAI,CAAC;QACzBI,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;;QAE1C;QACAb,MAAM,CAAC,OAAO,CAAC;MACnB;IACJ,CAAC,CAAC,OAAOU,GAAG,EAAE;MACVE,OAAO,CAACK,KAAK,CAAC,cAAc,EAAEP,GAAG,CAAC;IACtC;EACJ,CAAC;EAED,MAAMF,IAAI,GAAG;IACTV,QAAQ;IAAEC,WAAW;IAAEE,cAAc;IAACU;EAC1C,CAAC;EAED,oBACIrB,OAAA,CAACC,WAAW,CAAC2B,QAAQ;IAACC,KAAK,EAAEX,IAAK;IAAAZ,QAAA,EAC7BA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAAC1B,EAAA,CApEWF,YAAY;EAAA,QAGRP,WAAW;AAAA;AAAAoC,EAAA,GAHf7B,YAAY;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}