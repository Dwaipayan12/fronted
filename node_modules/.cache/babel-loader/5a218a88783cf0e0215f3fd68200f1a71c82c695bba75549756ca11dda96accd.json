{"ast":null,"code":"var _jsxFileName = \"C:\\\\Apna\\\\DeltaLibrary\\\\Zoom\\\\fronted\\\\src\\\\pages\\\\authentication.jsx\",\n  _s = $RefreshSig$();\nimport * as React from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Link from '@mui/material/Link';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\n// TODO remove, this demo shouldn't need to reset the theme.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultTheme = createTheme();\nexport default function Authentication() {\n  _s();\n  const [mode, setMode] = React.useState('light');\n  const [showCustomTheme, setShowCustomTheme] = React.useState(true);\n  const defaultTheme = createTheme({\n    palette: {\n      mode\n    }\n  });\n  const SignInSideTheme = createTheme(SignInSideTheme(mode));\n  // This code only runs on the client side, to determine the system color preference\n  React.useEffect(() => {\n    // Check if there is a preferred mode in localStorage\n    const savedMode = localStorage.getItem('themeMode');\n    if (savedMode) {\n      setMode(savedMode);\n    } else {\n      // If no preference is found, it uses system preference\n      const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      setMode(systemPrefersDark ? 'dark' : 'light');\n    }\n  }, []);\n  const toggleColorMode = () => {\n    const newMode = mode === 'dark' ? 'light' : 'dark';\n    setMode(newMode);\n    localStorage.setItem('themeMode', newMode); // Save the selected mode to localStorage\n  };\n  const toggleCustomTheme = () => {\n    setShowCustomTheme(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: showCustomTheme ? SignInSideTheme : defaultTheme,\n    children: /*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 11\n  }, this);\n}\n_s(Authentication, \"HkT7A4R1QSuXcsun9kNFAQDUgXQ=\");\n_c = Authentication;\nvar _c;\n$RefreshReg$(_c, \"Authentication\");","map":{"version":3,"names":["React","Avatar","Button","CssBaseline","TextField","FormControlLabel","Checkbox","Link","Paper","Box","Grid","Typography","createTheme","ThemeProvider","jsxDEV","_jsxDEV","defaultTheme","Authentication","_s","mode","setMode","useState","showCustomTheme","setShowCustomTheme","palette","SignInSideTheme","useEffect","savedMode","localStorage","getItem","systemPrefersDark","window","matchMedia","matches","toggleColorMode","newMode","setItem","toggleCustomTheme","prev","theme","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Apna/DeltaLibrary/Zoom/fronted/src/pages/authentication.jsx"],"sourcesContent":["\r\nimport * as React from 'react';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Link from '@mui/material/Link';\r\nimport Paper from '@mui/material/Paper';\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\nimport Typography from '@mui/material/Typography';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\n\r\n\r\n\r\n// TODO remove, this demo shouldn't need to reset the theme.\r\n\r\nconst defaultTheme = createTheme();\r\n\r\nexport default function Authentication() {\r\n\r\n        const [mode, setMode] = React.useState('light');\r\n        const [showCustomTheme, setShowCustomTheme] = React.useState(true);\r\n        const defaultTheme = createTheme({ palette: { mode } });\r\n        const SignInSideTheme = createTheme(SignInSideTheme(mode));\r\n        // This code only runs on the client side, to determine the system color preference\r\n        React.useEffect(() => {\r\n          // Check if there is a preferred mode in localStorage\r\n          const savedMode = localStorage.getItem('themeMode');\r\n          if (savedMode) {\r\n            setMode(savedMode);\r\n          } else {\r\n            // If no preference is found, it uses system preference\r\n            const systemPrefersDark = window.matchMedia(\r\n              '(prefers-color-scheme: dark)',\r\n            ).matches;\r\n            setMode(systemPrefersDark ? 'dark' : 'light');\r\n          }\r\n        }, []);\r\n      \r\n        const toggleColorMode = () => {\r\n          const newMode = mode === 'dark' ? 'light' : 'dark';\r\n          setMode(newMode);\r\n          localStorage.setItem('themeMode', newMode); // Save the selected mode to localStorage\r\n        };\r\n      \r\n        const toggleCustomTheme = () => {\r\n          setShowCustomTheme((prev) => !prev);\r\n        };\r\n      \r\n        return (\r\n          <ThemeProvider theme={showCustomTheme ? SignInSideTheme : defaultTheme}>\r\n            <CssBaseline />\r\n            {/* you can delete this NavBar component since it's just no navigate to other pages */}\r\n           \r\n           \r\n          </ThemeProvider>\r\n        );\r\n      }"],"mappings":";;AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,gBAAgB,MAAM,gCAAgC;AAC7D,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,GAAG,MAAM,mBAAmB;AACnC,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,WAAW,EAAEC,aAAa,QAAQ,sBAAsB;;AAIjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,YAAY,GAAGJ,WAAW,CAAC,CAAC;AAElC,eAAe,SAASK,cAAcA,CAAA,EAAG;EAAAC,EAAA;EAEjC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGpB,KAAK,CAACqB,QAAQ,CAAC,OAAO,CAAC;EAC/C,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGvB,KAAK,CAACqB,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAML,YAAY,GAAGJ,WAAW,CAAC;IAAEY,OAAO,EAAE;MAAEL;IAAK;EAAE,CAAC,CAAC;EACvD,MAAMM,eAAe,GAAGb,WAAW,CAACa,eAAe,CAACN,IAAI,CAAC,CAAC;EAC1D;EACAnB,KAAK,CAAC0B,SAAS,CAAC,MAAM;IACpB;IACA,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACnD,IAAIF,SAAS,EAAE;MACbP,OAAO,CAACO,SAAS,CAAC;IACpB,CAAC,MAAM;MACL;MACA,MAAMG,iBAAiB,GAAGC,MAAM,CAACC,UAAU,CACzC,8BACF,CAAC,CAACC,OAAO;MACTb,OAAO,CAACU,iBAAiB,GAAG,MAAM,GAAG,OAAO,CAAC;IAC/C;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,OAAO,GAAGhB,IAAI,KAAK,MAAM,GAAG,OAAO,GAAG,MAAM;IAClDC,OAAO,CAACe,OAAO,CAAC;IAChBP,YAAY,CAACQ,OAAO,CAAC,WAAW,EAAED,OAAO,CAAC,CAAC,CAAC;EAC9C,CAAC;EAED,MAAME,iBAAiB,GAAGA,CAAA,KAAM;IAC9Bd,kBAAkB,CAAEe,IAAI,IAAK,CAACA,IAAI,CAAC;EACrC,CAAC;EAED,oBACEvB,OAAA,CAACF,aAAa;IAAC0B,KAAK,EAAEjB,eAAe,GAAGG,eAAe,GAAGT,YAAa;IAAAwB,QAAA,eACrEzB,OAAA,CAACZ,WAAW;MAAAsC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAIF,CAAC;AAEpB;AAAC1B,EAAA,CAvCiBD,cAAc;AAAA4B,EAAA,GAAd5B,cAAc;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}