{"ast":null,"code":"var _jsxFileName = \"C:\\\\Apna\\\\DeltaLibrary\\\\Zoom\\\\fronted\\\\src\\\\pages\\\\VideoMeet.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport \"../styles/videocomponent.css\";\nimport io from \"socket.io-client\";\nimport { Badge, IconButton, TextField } from '@mui/material';\nimport { Button } from '@mui/material';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst server_url = \"http://localhost:8000\";\nvar connections = {};\nconst peerConfigConnections = {\n  \"iceServers\": [{\n    \"urls\": \"stun:stun.l.google.com:19302\"\n  }]\n};\nexport default function VideoMeetComponenet() {\n  _s();\n  var socketRef = useRef();\n  let socketIdRef = useRef();\n  let localVideoref = useRef();\n  let [videoAvailable, setVideoAvailable] = useState(true);\n  let [audioAvailable, setAudioAvailable] = useState(true);\n  let [video, setVideo] = useState([]);\n  let [audio, setAudio] = useState();\n  let [screen, setScreen] = useState();\n  let [showModal, setModal] = useState(true);\n  let [screenAvailable, setScreenAvailable] = useState();\n  let [messages, setMessages] = useState([]);\n  let [message, setMessage] = useState(\"\");\n  let [newMessages, setNewMessages] = useState(3);\n  let [askForUsername, setAskForUsername] = useState(true);\n  let [username, setUsername] = useState(\"\");\n  const videoRef = useRef([]);\n  let [videos, setVideos] = useState([]);\n  const getPermissions = async () => {\n    try {\n      const videoPermission = await navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      if (videoPermission) {\n        setVideoAvailable(true);\n      } else {\n        setVideoAvailable(false);\n      }\n      const audioPermission = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      if (audioPermission) {\n        setAudioAvailable(true);\n      } else {\n        setAudioAvailable(false);\n      }\n      if (navigator.mediaDevices.getDisplayMedia) {\n        setScreenAvailable(true);\n      } else {\n        setScreenAvailable(false);\n      }\n      if (videoAvailable || audioAvailable) {\n        const userMediaStream = await navigator.mediaDevices.getUserMedia({\n          video: videoAvailable,\n          audio: audioAvailable\n        });\n        if (userMediaStream) {\n          window.localStream = userMediaStream;\n          if (localVideoref.current) {\n            localVideoref.current.srcObject = userMediaStream;\n          }\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  useEffect(() => {\n    console.log(\"HELLO\");\n    getPermissions();\n  });\n  useEffect(() => {\n    if (video !== undefined && audio !== undefined) {\n      getUserMedia();\n      console.log(\"SET STATE HAS \", video, audio);\n    }\n  }, [video, audio]);\n  let getUserMedia = () => {\n    if (video && videoAvailable || audio && audioAvailable) {\n      navigator.mediaDevices.getUserMedia({\n        video: video,\n        audio: audio\n      }).then(getUserMediaSuccess).then(stream => {}).catch(e => console.log(e));\n    } else {\n      try {\n        let tracks = localVideoref.current.srcObject.getTracks();\n        tracks.forEach(track => track.stop());\n      } catch (e) {}\n    }\n  };\n  let getUserMediaSuccess = stream => {\n    try {\n      window.localStream.getTracks().forEach(track => track.stop());\n    } catch (e) {\n      console.log(e);\n    }\n    window.localStream = stream;\n    localVideoref.current.srcObject = stream;\n    for (let id in connections) {\n      if (id === socketIdRef.current) continue;\n      connections[id].addStream(window.localStream);\n      connections[id].createOffer().then(description => {\n        console.log(description);\n        connections[id].setLocalDescription(description).then(() => {\n          socketRef.current.emit('signal', id, JSON.stringify({\n            'sdp': connections[id].localDescription\n          }));\n        }).catch(e => console.log(e));\n      });\n    }\n  };\n  let getMedia = () => {\n    setVideo(videoAvailable);\n    setAudio(audioAvailable);\n    connectToSocketServer();\n  };\n  let gotMessageFromServer = (fromId, message) => {\n    var signal = JSON.parse(message);\n    if (fromId !== socketIdRef.current) {\n      if (signal.sdp) {\n        connections[fromId].setRemoteDescription(new RTCSessionDescription(signal.sdp)).then(() => {\n          if (signal.sdp.type === 'offer') {\n            connections[fromId].createAnswer().then(description => {\n              connections[fromId].setLocalDescription(description).then(() => {\n                socketRef.current.emit('signal', fromId, JSON.stringify({\n                  'sdp': connections[fromId].localDescription\n                }));\n              }).catch(e => console.log(e));\n            }).catch(e => console.log(e));\n          }\n        }).catch(e => console.log(e));\n      }\n      if (signal.ice) {\n        connections[fromId].addIceCandidate(new RTCIceCandidate(signal.ice)).catch(e => console.log(e));\n      }\n    }\n  };\n  const addMessage = (data, sender, socketIdSender) => {\n    setMessages(prevMessages => [...prevMessages, {\n      sender: sender,\n      data: data\n    }]);\n    if (socketIdSender !== socketIdRef.current) {\n      setNewMessages(prevNewMessages => prevNewMessages + 1);\n    }\n  };\n  let connectToSocketServer = () => {\n    socketRef.current = io.connect(server_url, {\n      secure: false\n    });\n    socketRef.current.on('signal', gotMessageFromServer);\n    socketRef.current.on('connect', () => {\n      socketRef.current.emit('join-call', window.location.href);\n      socketIdRef.current = socketRef.current.id;\n      socketRef.current.on('chat-message', addMessage);\n      socketRef.current.on('user-left', id => {\n        setVideos(videos => videos.filter(video => video.socketId !== id));\n      });\n      socketRef.current.on('user-joined', (id, clients) => {\n        clients.forEach(socketListId => {\n          connections[socketListId] = new RTCPeerConnection(peerConfigConnections);\n          // Wait for their ice candidate       \n          connections[socketListId].onicecandidate = function (event) {\n            if (event.candidate != null) {\n              socketRef.current.emit('signal', socketListId, JSON.stringify({\n                'ice': event.candidate\n              }));\n            }\n          };\n\n          // Wait for their video stream\n          connections[socketListId].onaddstream = event => {\n            console.log(\"BEFORE:\", videoRef.current);\n            console.log(\"FINDING ID: \", socketListId);\n            let videoExists = videoRef.current.find(video => video.socketId === socketListId);\n            if (videoExists) {\n              console.log(\"FOUND EXISTING\");\n\n              // Update the stream of the existing video\n              setVideos(videos => {\n                const updatedVideos = videos.map(video => video.socketId === socketListId ? {\n                  ...video,\n                  stream: event.stream\n                } : video);\n                videoRef.current = updatedVideos;\n                return updatedVideos;\n              });\n            } else {\n              // Create a new video\n              console.log(\"CREATING NEW\");\n              let newVideo = {\n                socketId: socketListId,\n                stream: event.stream,\n                autoplay: true,\n                playsinline: true\n              };\n              setVideos(videos => {\n                const updatedVideos = [...videos, newVideo];\n                videoRef.current = updatedVideos;\n                return updatedVideos;\n              });\n            }\n          };\n\n          // Add the local video stream\n          if (window.localStream !== undefined && window.localStream !== null) {\n            connections[socketListId].addStream(window.localStream);\n          } else {\n            let blackSilence = (...args) => new MediaStream([black(...args), silence()]);\n            window.localStream = blackSilence();\n            connections[socketListId].addStream(window.localStream);\n          }\n        });\n        if (id === socketIdRef.current) {\n          for (let id2 in connections) {\n            if (id2 === socketIdRef.current) continue;\n            try {\n              connections[id2].addStream(window.localStream);\n            } catch (e) {}\n            connections[id2].createOffer().then(description => {\n              connections[id2].setLocalDescription(description).then(() => {\n                socketRef.current.emit('signal', id2, JSON.stringify({\n                  'sdp': connections[id2].localDescription\n                }));\n              }).catch(e => console.log(e));\n            });\n          }\n        }\n      });\n    });\n  };\n  let silence = () => {\n    let ctx = new AudioContext();\n    let oscillator = ctx.createOscillator();\n    let dst = oscillator.connect(ctx.createMediaStreamDestination());\n    oscillator.start();\n    ctx.resume();\n    return Object.assign(dst.stream.getAudioTracks()[0], {\n      enabled: false\n    });\n  };\n  let black = ({\n    width = 640,\n    height = 480\n  } = {}) => {\n    let canvas = Object.assign(document.createElement(\"canvas\"), {\n      width,\n      height\n    });\n    canvas.getContext('2d').fillRect(0, 0, width, height);\n    let stream = canvas.captureStream();\n    return Object.assign(stream.getVideoTracks()[0], {\n      enabled: false\n    });\n  };\n  let connect = () => {\n    setAskForUsername(false);\n    getMedia();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: askForUsername === true ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Enter into Lobby\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"outlined-basic\",\n        label: \"Username\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        variant: \"outlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: connect,\n        children: \"Connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: localVideoref,\n          autoPlay: true,\n          muted: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        ref: localVideoref,\n        autoPlay: true,\n        muted: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this), videos.map(video => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"video.socketId\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n          \"data-socket\": video.socketId,\n          ref: ref => {\n            if (ref && video.stream) {\n              ref.srcObject = video.stream;\n            }\n          },\n          autoPlay: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this)]\n      }, video.socketId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this))]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 296,\n    columnNumber: 9\n  }, this);\n}\n_s(VideoMeetComponenet, \"eLRkjeWwmjF3m45AkCVlc4CFxV4=\");\n_c = VideoMeetComponenet;\nvar _c;\n$RefreshReg$(_c, \"VideoMeetComponenet\");","map":{"version":3,"names":["React","useEffect","useRef","useState","io","Badge","IconButton","TextField","Button","jsxDEV","_jsxDEV","Fragment","_Fragment","server_url","connections","peerConfigConnections","VideoMeetComponenet","_s","socketRef","socketIdRef","localVideoref","videoAvailable","setVideoAvailable","audioAvailable","setAudioAvailable","video","setVideo","audio","setAudio","screen","setScreen","showModal","setModal","screenAvailable","setScreenAvailable","messages","setMessages","message","setMessage","newMessages","setNewMessages","askForUsername","setAskForUsername","username","setUsername","videoRef","videos","setVideos","getPermissions","videoPermission","navigator","mediaDevices","getUserMedia","audioPermission","getDisplayMedia","userMediaStream","window","localStream","current","srcObject","err","console","log","undefined","then","getUserMediaSuccess","stream","catch","e","tracks","getTracks","forEach","track","stop","id","addStream","createOffer","description","setLocalDescription","emit","JSON","stringify","localDescription","getMedia","connectToSocketServer","gotMessageFromServer","fromId","signal","parse","sdp","setRemoteDescription","RTCSessionDescription","type","createAnswer","ice","addIceCandidate","RTCIceCandidate","addMessage","data","sender","socketIdSender","prevMessages","prevNewMessages","connect","secure","on","location","href","filter","socketId","clients","socketListId","RTCPeerConnection","onicecandidate","event","candidate","onaddstream","videoExists","find","updatedVideos","map","newVideo","autoplay","playsinline","blackSilence","args","MediaStream","black","silence","id2","ctx","AudioContext","oscillator","createOscillator","dst","createMediaStreamDestination","start","resume","Object","assign","getAudioTracks","enabled","width","height","canvas","document","createElement","getContext","fillRect","captureStream","getVideoTracks","children","fileName","_jsxFileName","lineNumber","columnNumber","label","value","onChange","target","variant","onClick","ref","autoPlay","muted","_c","$RefreshReg$"],"sources":["C:/Apna/DeltaLibrary/Zoom/fronted/src/pages/VideoMeet.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport \"../styles/videocomponent.css\";\r\nimport io from \"socket.io-client\";\r\nimport { Badge, IconButton, TextField } from '@mui/material';\r\nimport { Button } from '@mui/material';\r\nconst server_url=\"http://localhost:8000\";\r\nvar connections = {};\r\nconst peerConfigConnections = {\r\n    \"iceServers\": [\r\n        { \"urls\": \"stun:stun.l.google.com:19302\" }\r\n    ]\r\n}\r\nexport default function VideoMeetComponenet(){\r\n    var socketRef = useRef();\r\n    let socketIdRef = useRef();\r\n\r\n    let localVideoref = useRef();\r\n\r\n    let [videoAvailable, setVideoAvailable] = useState(true);\r\n\r\n    let [audioAvailable, setAudioAvailable] = useState(true);\r\n\r\n    let [video, setVideo] = useState([]);\r\n\r\n    let [audio, setAudio] = useState();\r\n\r\n    let [screen, setScreen] = useState();\r\n\r\n    let [showModal, setModal] = useState(true);\r\n\r\n    let [screenAvailable, setScreenAvailable] = useState();\r\n\r\n    let [messages, setMessages] = useState([])\r\n\r\n    let [message, setMessage] = useState(\"\");\r\n\r\n    let [newMessages, setNewMessages] = useState(3);\r\n\r\n    let [askForUsername, setAskForUsername] = useState(true);\r\n\r\n    let [username, setUsername] = useState(\"\");\r\n\r\n    const videoRef = useRef([])\r\n\r\n    let [videos, setVideos] = useState([])\r\n\r\n    const getPermissions=async()=>{\r\n        try{\r\n            const videoPermission = await navigator.mediaDevices.getUserMedia({ video: true });\r\n            if(videoPermission)\r\n            {\r\n                setVideoAvailable(true);\r\n            }\r\n            else{\r\n                setVideoAvailable(false);\r\n            }\r\n            const audioPermission = await navigator.mediaDevices.getUserMedia({ audio: true });\r\n                if(audioPermission)\r\n                {\r\n                    setAudioAvailable(true);\r\n                }\r\n                else{\r\n                    setAudioAvailable(false);\r\n                }\r\n                if (navigator.mediaDevices.getDisplayMedia) {\r\n                    setScreenAvailable(true);\r\n                } else {\r\n                    setScreenAvailable(false);\r\n                }\r\n                if (videoAvailable || audioAvailable) {\r\n                    const userMediaStream = await navigator.mediaDevices.getUserMedia({ video: videoAvailable, audio: audioAvailable });\r\n                    if (userMediaStream) {\r\n                        window.localStream = userMediaStream;\r\n                        if (localVideoref.current) {\r\n                            localVideoref.current.srcObject = userMediaStream;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        catch(err){\r\n         console.log(err);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        console.log(\"HELLO\")\r\n        getPermissions();\r\n\r\n    })\r\n    useEffect(() => {\r\n        if (video !== undefined && audio !== undefined) {\r\n            getUserMedia();\r\n            console.log(\"SET STATE HAS \", video, audio);\r\n\r\n        }\r\n\r\n\r\n    }, [video, audio]);\r\n\r\n    let getUserMedia = () => {\r\n        if ((video && videoAvailable) || (audio && audioAvailable)) {\r\n            navigator.mediaDevices.getUserMedia({ video: video, audio: audio })\r\n                .then(getUserMediaSuccess)\r\n                .then((stream) => { })\r\n                .catch((e) => console.log(e))\r\n        } else {\r\n            try {\r\n                let tracks = localVideoref.current.srcObject.getTracks()\r\n                tracks.forEach(track => track.stop())\r\n            } catch (e) { }\r\n        }\r\n    }\r\n\r\n\r\n    let getUserMediaSuccess = (stream) => {\r\n        try {\r\n            window.localStream.getTracks().forEach(track => track.stop())\r\n        } catch (e) { console.log(e) }\r\n\r\n        window.localStream = stream\r\n        localVideoref.current.srcObject = stream\r\n\r\n        for (let id in connections) {\r\n            if (id === socketIdRef.current) continue\r\n\r\n            connections[id].addStream(window.localStream)\r\n\r\n            connections[id].createOffer().then((description) => {\r\n                console.log(description)\r\n                connections[id].setLocalDescription(description)\r\n                    .then(() => {\r\n                        socketRef.current.emit('signal', id, JSON.stringify({ 'sdp': connections[id].localDescription }))\r\n                    })\r\n                    .catch(e => console.log(e))\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    let getMedia = () => {\r\n        setVideo(videoAvailable);\r\n        setAudio(audioAvailable);\r\n        connectToSocketServer();\r\n\r\n    }\r\n    let gotMessageFromServer = (fromId, message) => {\r\n        var signal = JSON.parse(message)\r\n\r\n        if (fromId !== socketIdRef.current) {\r\n            if (signal.sdp) {\r\n                connections[fromId].setRemoteDescription(new RTCSessionDescription(signal.sdp)).then(() => {\r\n                    if (signal.sdp.type === 'offer') {\r\n                        connections[fromId].createAnswer().then((description) => {\r\n                            connections[fromId].setLocalDescription(description).then(() => {\r\n                                socketRef.current.emit('signal', fromId, JSON.stringify({ 'sdp': connections[fromId].localDescription }))\r\n                            }).catch(e => console.log(e))\r\n                        }).catch(e => console.log(e))\r\n                    }\r\n                }).catch(e => console.log(e))\r\n            }\r\n\r\n            if (signal.ice) {\r\n                connections[fromId].addIceCandidate(new RTCIceCandidate(signal.ice)).catch(e => console.log(e))\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const addMessage = (data, sender, socketIdSender) => {\r\n        setMessages((prevMessages) => [\r\n            ...prevMessages,\r\n            { sender: sender, data: data }\r\n        ]);\r\n        if (socketIdSender !== socketIdRef.current) {\r\n            setNewMessages((prevNewMessages) => prevNewMessages + 1);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    let connectToSocketServer = () => {\r\n        socketRef.current = io.connect(server_url, { secure: false })\r\n\r\n        socketRef.current.on('signal', gotMessageFromServer)\r\n\r\n        socketRef.current.on('connect', () => {\r\n            socketRef.current.emit('join-call', window.location.href)\r\n            socketIdRef.current = socketRef.current.id\r\n\r\n            socketRef.current.on('chat-message', addMessage)\r\n\r\n            socketRef.current.on('user-left', (id) => {\r\n                setVideos((videos) => videos.filter((video) => video.socketId !== id))\r\n            })\r\n\r\n            socketRef.current.on('user-joined', (id, clients) => {\r\n                clients.forEach((socketListId) => {\r\n\r\n                    connections[socketListId] = new RTCPeerConnection(peerConfigConnections)\r\n                    // Wait for their ice candidate       \r\n                    connections[socketListId].onicecandidate = function (event) {\r\n                        if (event.candidate != null) {\r\n                            socketRef.current.emit('signal', socketListId, JSON.stringify({ 'ice': event.candidate }))\r\n                        }\r\n                    }\r\n\r\n                    // Wait for their video stream\r\n                    connections[socketListId].onaddstream = (event) => {\r\n                        console.log(\"BEFORE:\", videoRef.current);\r\n                        console.log(\"FINDING ID: \", socketListId);\r\n\r\n                        let videoExists = videoRef.current.find(video => video.socketId === socketListId);\r\n\r\n                        if (videoExists) {\r\n                            console.log(\"FOUND EXISTING\");\r\n\r\n                            // Update the stream of the existing video\r\n                            setVideos(videos => {\r\n                                const updatedVideos = videos.map(video =>\r\n                                    video.socketId === socketListId ? { ...video, stream: event.stream } : video\r\n                                );\r\n                                videoRef.current = updatedVideos;\r\n                                return updatedVideos;\r\n                            });\r\n                        } else {\r\n                            // Create a new video\r\n                            console.log(\"CREATING NEW\");\r\n                            let newVideo = {\r\n                                socketId: socketListId,\r\n                                stream: event.stream,\r\n                                autoplay: true,\r\n                                playsinline: true\r\n                            };\r\n\r\n                            setVideos(videos => {\r\n                                const updatedVideos = [...videos, newVideo];\r\n                                videoRef.current = updatedVideos;\r\n                                return updatedVideos;\r\n                            });\r\n                        }\r\n                    };\r\n\r\n\r\n                    // Add the local video stream\r\n                    if (window.localStream !== undefined && window.localStream !== null) {\r\n                        connections[socketListId].addStream(window.localStream)\r\n                    } else {\r\n                        let blackSilence = (...args) => new MediaStream([black(...args), silence()])\r\n                        window.localStream = blackSilence()\r\n                        connections[socketListId].addStream(window.localStream)\r\n                    }\r\n                })\r\n\r\n                if (id === socketIdRef.current) {\r\n                    for (let id2 in connections) {\r\n                        if (id2 === socketIdRef.current) continue\r\n\r\n                        try {\r\n                            connections[id2].addStream(window.localStream)\r\n                        } catch (e) { }\r\n\r\n                        connections[id2].createOffer().then((description) => {\r\n                            connections[id2].setLocalDescription(description)\r\n                                .then(() => {\r\n                                    socketRef.current.emit('signal', id2, JSON.stringify({ 'sdp': connections[id2].localDescription }))\r\n                                })\r\n                                .catch(e => console.log(e))\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    let silence = () => {\r\n        let ctx = new AudioContext()\r\n        let oscillator = ctx.createOscillator()\r\n        let dst = oscillator.connect(ctx.createMediaStreamDestination())\r\n        oscillator.start()\r\n        ctx.resume()\r\n        return Object.assign(dst.stream.getAudioTracks()[0], { enabled: false })\r\n    }\r\n    let black = ({ width = 640, height = 480 } = {}) => {\r\n        let canvas = Object.assign(document.createElement(\"canvas\"), { width, height })\r\n        canvas.getContext('2d').fillRect(0, 0, width, height)\r\n        let stream = canvas.captureStream()\r\n        return Object.assign(stream.getVideoTracks()[0], { enabled: false })\r\n    }\r\n\r\n    let connect = () => {\r\n        setAskForUsername(false);\r\n        getMedia();\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {askForUsername === true ?\r\n            <div>\r\n              <h2>Enter into Lobby</h2>\r\n              <TextField id=\"outlined-basic\" label=\"Username\" value={username} onChange={e => setUsername(e.target.value)} variant=\"outlined\" />\r\n            <Button variant=\"contained\" onClick={connect}>Connect</Button>\r\n            <div>\r\n                <video ref={localVideoref} autoPlay muted></video>\r\n            </div>\r\n        </div>:<>\r\n        <video ref={localVideoref} autoPlay muted></video>\r\n       \r\n       {\r\n        videos.map((video)=>(\r\n        <div key={video.socketId}>\r\n            <h2>video.socketId</h2>\r\n            <video \r\n            data-socket={video.socketId}\r\n            ref={ref=>{\r\n                if(ref && video.stream){\r\n                    ref.srcObject=video.stream;\r\n                }\r\n              }}\r\n              autoPlay\r\n            >\r\n                </video>\r\n        \r\n        </div>\r\n        ))}\r\n        </>\r\n        }\r\n    </div>\r\n    )\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}